{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["QUOTES","text","author","Card","props","state","getQuote","bind","idx","Math","round","random","length","newQuote","this","setState","className","id","toUpperCase","handleClick","Component","TextQuote","AuthorQuote","NewQuote","onClick","Tweet","title","target","rel","href","encodeURIComponent","Footer","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4PAIMA,G,MAAS,CACb,CAACC,KAAM,iVAAoEC,OAAQ,mFACnF,CAACD,KAAM,uDAAwDC,OAAQ,wBACvE,CAACD,KAAM,4HAAwHC,OAAQ,gBACvI,CAACD,KAAM,oDAAqDC,OAAQ,eACpE,CAACD,KAAM,qOAAkNC,OAAQ,mBACjO,CAACD,KAAM,oDAAqDC,OAAQ,iBACpE,CAACD,KAAM,kEAAmEC,OAAQ,oBAClF,CAACD,KAAM,qDAAsDC,OAAQ,aACrE,CAACD,KAAM,gFAAiFC,OAAQ,kBAChG,CAACD,KAAM,8CAA+CC,OAAQ,eAI1DC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXJ,KAAM,QACNC,OAAQ,OAEV,EAAKI,SAAW,EAAKA,SAASC,KAAd,gBANC,E,wEAUjB,IAAMC,EAAMC,KAAKC,MAAMD,KAAKE,UAAYX,EAAOY,OAAS,IAClDC,EAAWb,EAAOQ,GAQxBM,KAAKC,SAAS,CAEZd,KAAMY,EAASZ,KACfC,OAAQW,EAASX,W,2CAKnBY,KAAKR,a,+BAIL,OACE,yBAAKU,UAAU,WACb,yBAAKC,GAAG,aACN,kBAAC,EAAD,CAAWhB,KAAMa,KAAKT,MAAMJ,KAAKiB,gBACjC,kBAAC,EAAD,CAAahB,OAAQY,KAAKT,MAAMH,SAChC,kBAAC,EAAD,CAAOD,KAAMa,KAAKT,MAAMJ,OACxB,kBAAC,EAAD,CAAUkB,YAAaL,KAAKR,YAE9B,kBAAC,EAAD,W,GAxCWc,aA+CbC,EAAY,SAACjB,GACjB,OACE,yBAAKa,GAAG,QACN,8BAAOb,EAAMH,QAKbqB,EAAc,SAAAlB,GAClB,OACE,yBAAKa,GAAG,UACN,8BAAOb,EAAMF,UAKbqB,EAAW,SAAAnB,GACf,OACE,4BACEa,GAAG,YACHO,QAASpB,EAAMe,YACfH,UAAU,wBAHZ,cAUES,EAAQ,SAAArB,GACZ,OACE,uBACAa,GAAG,cACHS,MAAM,oBACNC,OAAO,SACPC,IAAI,sBACJC,KAAI,qFAAgFC,mBAAmB1B,EAAMH,QAE3G,uBAAGe,UAAU,qBAKbe,EAAS,WACb,OACE,yBAAKf,UAAU,UACb,qCACA,uBACEa,KAAK,0BACLF,OAAO,SACPC,IAAI,uBAHN,iBAME,uBAAGZ,UAAU,sBAgBNgB,E,iLAPX,OACE,kBAAC,EAAD,U,GAHYZ,aClHZa,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB1C,QACfoC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBjB,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,eAAwBzB,OAAOC,UAC3CyB,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMoB,eAAN,sBAEP3B,IAiDV,SAAiCO,GAE/BuB,MAAMvB,GACHI,MAAK,SAAAoB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAAAC,GACjCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAoB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCzCxBiC,I","file":"static/js/main.4be5fb1b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n\nconst QUOTES = [\n  {text: \"В действительности существуют два мага — природа и наши желания.\", author: \"Ишхан Геворгян\"},\n  {text: \"History will be kind to me for I intend to write it.\", author: \"Winston S. Churchill\"},\n  {text: \"I hated every minute of training, but I said, 'Don’t quit. Suffer now and live the rest of your life as a champion'.\", author: \"Muhammad Ali\"},\n  {text: \"We are all failures. At least the best of us are.\", author: \"J.M. Barrie\"},\n  {text: \"If you want happiness for an hour – take a nap. If you want happiness for a day – go fishing. If you want happiness for a year – inherit a fortune. If you want happiness for a life time – help someone else.\", author: \"Chinese proverb\"},\n  {text: \"There are no short cuts to any place worth going.\", author: \"Beverly Sills\"},\n  {text: \"I have not failed. I've just found 10,000 ways that won't work.\", author: \"Thomas A. Edison\"},\n  {text: \"Every strike brings me closer to the next home run\", author: \"Babe Ruth\"},\n  {text: \"The most difficult thing is the decision to act, the rest is merely tenacity.\", author: \"Amelia Earhart\"},\n  {text: \"The power of imagination makes us infinite.\", author: \"John Muir\"},\n  ]\n  \n\nclass Card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"dkkdl\",\n      author: \"ddd\",\n    }\n    this.getQuote = this.getQuote.bind(this);\n  };\n\n  getQuote() {\n    const idx = Math.round(Math.random() * (QUOTES.length - 1));\n    const newQuote = QUOTES[idx];\n    // console.log(`newQuote - ${JSON.stringify(newQuote)}`);\n    // let xhr = new XMLHttpRequest();\n    // xhr.open('GET', 'http://api.forismatic.com/api/1.0/?method=getQuote&format=json&lang=en', false);\n    // xhr.send();\n    // const m = xhr.responseText;\n    // let n = fetch('http://api.forismatic.com/api/1.0/?method=getQuote&format=jsonp&lang=en', {mode: \"no-cors\"});\n    // console.log(n);\n    this.setState({\n      \n      text: newQuote.text,\n      author: newQuote.author,\n    });\n  };\n\n  componentWillMount() {\n    this.getQuote();\n  }\n\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div id=\"quote-box\">\n          <TextQuote text={this.state.text.toUpperCase()} />\n          <AuthorQuote author={this.state.author} />\n          <Tweet text={this.state.text} />\n          <NewQuote handleClick={this.getQuote} />\n        </div>\n        <Footer />\n      </div>\n    )\n  }\n\n};\n\nconst TextQuote = (props) => {\n  return (\n    <div id=\"text\">\n      <span>{props.text}</span>\n    </div>\n    );\n};\n\nconst AuthorQuote = props => {\n  return (\n    <div id=\"author\">\n      <span>{props.author}</span>\n    </div>\n  );\n};\n\nconst NewQuote = props => {\n  return (\n    <button \n      id=\"new-quote\" \n      onClick={props.handleClick}\n      className=\"btn btn-outline-dark\"\n    >\n      New quote\n    </button>\n  )\n};\n\nconst Tweet = props => {\n  return (\n    <a \n    id=\"tweet-quote\" \n    title=\"Tweet this quote!\" \n    target=\"_blank\"\n    rel=\"noopener noreferrer\" \n    href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=${encodeURIComponent(props.text)}`}\n    >\n      <i className=\"fab fa-twitter\"></i>\n    </a>\n  );\n};\n\nconst Footer = function() {\n  return (\n    <div className=\"footer\">\n      <span>by </span>\n      <a \n        href=\"https://codepen.io/D-F/\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Dexter Freeman\n        <i className=\"fab fa-codepen\"></i>\n      </a>\n    </div>\n  )\n}\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Card />\n    )\n  }\n}\n\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}